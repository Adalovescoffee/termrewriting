var searchIndex = new Map(JSON.parse('[["termrewriting",{"t":"CHHCCPPPPPPPFPPPPGPNNNNONNNNNNNNONNNNONNONNNNNNNNPPPPPGPGFGPPPPNNHNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNONNNNNONNNNNNNNNNNNNNNNNOOOFFHNNNNNHNNNNNHNNHHNNNONONNNNNNN","n":["lexer","main","parse_input_to_rule_tuple","parser","term","Assign","Divide","Eof","Eq","Illegal","Integer","LParen","Lexer","Minus","Multiply","Plus","RParen","TokenType","Variable","borrow","","borrow_mut","","ch","clone","clone_into","clone_to_uninit","eq","fmt","from","","get_token","input","into","","new","peek_char","position","read_char","read_number","read_position","skip_whitespace","to_owned","try_from","","try_into","","type_id","","Add","Assign","BinaryOp","Divide","Multiply","Node","Number","Operator","Parser","ParserError","Subtract","UnexpectedToken","Variable","_LexerError","_get_char","_peek_token_is","_string_display_width","advance","borrow","","","","borrow_mut","","","","clone","","clone_into","","clone_to_uninit","","current_token","current_token_is","eq","","","expect_and_advance","fmt","","","","","from","","","","get_number","into","","","","lexer","new","parse_equality","parse_factor","parse_term","parse_tuah","peek_token","same_type","to_owned","","to_string","","try_from","","","","try_into","","","","type_id","","","","expected","found","position","BySubsumption","Term","_equalitysides","borrow","","borrow_mut","","complexitysize","countsize","eq","","fmt","from","","from_str","into","","matchandassigns","nodesubst","partial_cmp","","rewriteby","size","subsumes","term","to_string","try_from","","try_into","","type_id",""],"q":[[0,"termrewriting"],[5,"termrewriting::lexer"],[49,"termrewriting::parser"],[125,"termrewriting::parser::ParserError"],[128,"termrewriting::term"],[160,"core::result"],[161,"core::fmt"],[162,"alloc::string"],[163,"core::option"],[164,"core::any"],[165,"std::collections::hash::map"],[166,"core::cmp"]],"i":"`````Ah000000`0000`0Ad10101111101000100000001010101Bl0h11`0```1n101Bj`00213021323232300213022133021320213000000022323021302130213C`00```CbCd101`10110`10``1011111101010","f":"`{{}b}{{{f{d}}}{{A`{{l{{l{hj}}{l{hj}}}}n}}}}````````````````{f{{f{c}}}{}}0{{{f{Ab}}}{{f{Abc}}}{}}0{AdAf}{{{f{Ah}}}Ah}{{f{f{Abc}}}b{}}{{fAj}b}{{{f{Ah}}{f{Ah}}}Al}{{{f{Ah}}{f{AbAn}}}B`}{cc{}}0{{{f{AbAd}}}Ah}{AdBb}{{}c{}}0{BbAd}{{{f{Ad}}}{{Bd{Af}}}}{AdBf}{{{f{AbAd}}}b}{{{f{AbAd}}}Bb}21{fc{}}{c{{A`{e}}}{}{}}0{{}{{A`{c}}}{}}0{fBh}0``````````````{{{f{h}}}{{Bd{Af}}}}{{{f{Bj}}Ah}Al}{{{f{d}}}Bf}{{{f{AbBj}}}b}{f{{f{c}}}{}}000{{{f{Ab}}}{{f{Abc}}}{}}000{{{f{h}}}h}{{{f{Bl}}}Bl}{{f{f{Abc}}}b{}}0{{fAj}b}0{BjAh}9{{{f{h}}{f{h}}}Al}{{{f{n}}{f{n}}}Al}{{{f{Bl}}{f{Bl}}}Al}{{{f{AbBj}}Ah}{{A`{bn}}}}{{{f{h}}{f{AbAn}}}B`}0{{{f{n}}{f{AbAn}}}B`}{{{f{Bl}}{f{AbAn}}}B`}0{cc{}}000{{{f{h}}}{{Bd{Bn}}}}{{}c{}}000{BjAd}{AdBj}{{{f{AbBj}}}{{A`{{l{{l{hj}}{l{hj}}}}n}}}}{{{f{AbBj}}}{{A`{{l{hj}}n}}}}00>={fc{}}0{fBb}0{c{{A`{e}}}{}{}}000{{}{{A`{c}}}{}}000{fBh}000{C`Ah}0{C`Bf}``{{{f{h}}}{{Bd{{l{hh}}}}}}{f{{f{c}}}{}}0{{{f{Ab}}}{{f{Abc}}}{}}0{{{f{Cb}}}j}{{{f{h}}}j}{{{f{Cb}}{f{Cb}}}Al}{{{f{Cd}}{f{Cd}}}Al}{{{f{Cb}}{f{AbAn}}}B`}{cc{}}0{{{f{d}}}{{A`{CbBb}}}}{{}c{}}0{{{f{h}}{f{h}}}{{Bd{{Cf{Afh}}}}}}{{{f{h}}{f{{Cf{Afh}}}}}{{l{hj}}}}{{{f{Cb}}{f{Cb}}}{{Bd{Ch}}}}{{{f{Cd}}{f{Cd}}}{{Bd{Ch}}}}{{{f{Cb}}{l{{l{{f{h}}j}}{l{{f{h}}j}}}}}Cb}{Cbj}{{{f{Cb}}{f{h}}}Al}{Cbh}{fBb}{c{{A`{e}}}{}{}}0{{}{{A`{c}}}{}}0{fBh}0","D":"Db","p":[[1,"unit"],[1,"str"],[1,"reference",null,null,1],[6,"Node",49],[1,"i16"],[1,"tuple",null,null,1],[6,"ParserError",49],[6,"Result",160,null,1],[0,"mut"],[5,"Lexer",5],[1,"char"],[6,"TokenType",5],[1,"u8"],[1,"bool"],[5,"Formatter",161],[8,"Result",161],[5,"String",162],[6,"Option",163,null,1],[1,"usize"],[5,"TypeId",164],[5,"Parser",49],[6,"Operator",49],[1,"i64"],[15,"UnexpectedToken",125],[5,"Term",128],[5,"BySubsumption",128],[5,"HashMap",165],[6,"Ordering",166]],"r":[],"b":[[87,"impl-Display-for-Node"],[88,"impl-Debug-for-Node"],[90,"impl-Display-for-Operator"],[91,"impl-Debug-for-Operator"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAH8ADQAAAB0AIAABACUAEQA4AAAAOwAEAEEAGwBmAAYAbgASAIQAAwCKAAIAlAABAJcAAACZAAcA","P":[[19,"T"],[23,""],[25,"T"],[26,""],[29,"T"],[31,""],[33,"U"],[35,""],[42,"T"],[43,"U,T"],[45,"U"],[47,""],[67,"T"],[75,""],[77,"T"],[79,""],[92,"T"],[96,""],[97,"U"],[101,""],[109,"T"],[111,""],[113,"U,T"],[117,"U"],[121,""],[131,"T"],[135,""],[140,"T"],[142,""],[143,"U"],[145,""],[154,"U,T"],[156,"U"],[158,""]]}]]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
//{"start":39,"fragment_lengths":[4366]}