searchState.loadedDescShard("termrewriting", 0, "Returns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new Lexer instance and initializes it by reading …\na node is either a number a variable or a binary op of …\noperator can either be ‘+’,‘-’,‘*’,‘/’,‘=…\nparser struct : lexer , the current token its in, and the …\nprevious get_char from back when i didn’t know rust had …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\ngets the value from a node::number()\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\ncheck if two nodes are of the same types\nsubsumption order wrapper\na term is a node (variable,number, binary operation of …\ncheck if it’s an equality, returns lhs and rhs if it’s …\nreturns the number of operations in a term\ncounts the size of a tree\nReturns the argument unchanged.\nReturns the argument unchanged.\nhelper that defines term from str (so far no error when …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOn a given node of the ast, it attempts to match if one …\nsubstitutes a node\nrewrites term by an equality, returns it as a term\nchecks if one term is a subsumption of another  (not …")